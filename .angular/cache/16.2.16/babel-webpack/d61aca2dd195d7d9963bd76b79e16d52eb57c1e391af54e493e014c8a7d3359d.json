{"ast":null,"code":"import { Validators } from '@angular/forms';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/forms\";\nimport * as i2 from \"../services/books.service\";\nimport * as i3 from \"@angular/common\";\nfunction BooksComponent_li_7_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"li\");\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const b_r1 = ctx.$implicit;\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate3(\" \", b_r1.title, \" \\u2014 \", b_r1.authorName || \"(sin autor)\", \" \\u2014 \", b_r1.published || \"(sin fecha)\", \" \");\n  }\n}\nexport let BooksComponent = /*#__PURE__*/(() => {\n  class BooksComponent {\n    constructor(fb, api) {\n      this.fb = fb;\n      this.api = api;\n      this.form = this.fb.group({\n        // BUG: el backend espera 'title'\n        name: ['', Validators.required],\n        price: [0, Validators.min(0)],\n        authorId: [1, Validators.required]\n      });\n      this.books = [];\n      // BUG: usa 'id' en vez de 'bookId'\n      this.trackById = (_, item) => item.id;\n    }\n    ngOnInit() {\n      this.load();\n    }\n    load() {\n      this.api.getAll().subscribe({\n        next: data => this.books = data,\n        error: err => console.error('GET error', err)\n      });\n    }\n    create() {\n      const v = this.form.value;\n      // BUG: se envía 'name' en vez de 'title'\n      const payload = {\n        title: v.name,\n        price: v.price ?? 0,\n        authorId: v.authorId ?? 1\n      };\n      this.api.create(payload).subscribe({\n        next: _ => this.load(),\n        error: err => console.error('POST error', err)\n      });\n    }\n    static {\n      this.ɵfac = function BooksComponent_Factory(t) {\n        return new (t || BooksComponent)(i0.ɵɵdirectiveInject(i1.FormBuilder), i0.ɵɵdirectiveInject(i2.BooksService));\n      };\n    }\n    static {\n      this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n        type: BooksComponent,\n        selectors: [[\"app-books\"]],\n        decls: 8,\n        vars: 3,\n        consts: [[3, \"formGroup\", \"ngSubmit\"], [\"formControlName\", \"name\", \"placeholder\", \"Title\"], [\"type\", \"number\", \"formControlName\", \"price\", \"placeholder\", \"Price\"], [\"type\", \"number\", \"formControlName\", \"authorId\", \"placeholder\", \"AuthorId\"], [\"type\", \"submit\"], [4, \"ngFor\", \"ngForOf\", \"ngForTrackBy\"]],\n        template: function BooksComponent_Template(rf, ctx) {\n          if (rf & 1) {\n            i0.ɵɵelementStart(0, \"form\", 0);\n            i0.ɵɵlistener(\"ngSubmit\", function BooksComponent_Template_form_ngSubmit_0_listener() {\n              return ctx.create();\n            });\n            i0.ɵɵelement(1, \"input\", 1)(2, \"input\", 2)(3, \"input\", 3);\n            i0.ɵɵelementStart(4, \"button\", 4);\n            i0.ɵɵtext(5, \"Create\");\n            i0.ɵɵelementEnd()();\n            i0.ɵɵelementStart(6, \"ul\");\n            i0.ɵɵtemplate(7, BooksComponent_li_7_Template, 2, 3, \"li\", 5);\n            i0.ɵɵelementEnd();\n          }\n          if (rf & 2) {\n            i0.ɵɵproperty(\"formGroup\", ctx.form);\n            i0.ɵɵadvance(7);\n            i0.ɵɵproperty(\"ngForOf\", ctx.books)(\"ngForTrackBy\", ctx.trackById);\n          }\n        },\n        dependencies: [i3.NgForOf, i1.ɵNgNoValidate, i1.DefaultValueAccessor, i1.NumberValueAccessor, i1.NgControlStatus, i1.NgControlStatusGroup, i1.FormGroupDirective, i1.FormControlName],\n        encapsulation: 2\n      });\n    }\n  }\n  return BooksComponent;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}